/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_dip

#ifdef __cplusplus
extern "C" {
#endif

void dip2_init(int niter          /* number of linear iterations */,
	       int nx, int ny     /* dimensions */, 
	       float fx, float fy /* smoothing */, 
	       bool sign1         /* to keep sign */, 
	       bool gauss         /* to use Gaussian smoothing */,
	       bool verb          /* verbosity flag */);
/*< initialize >*/

void dip2_close(void);
/*< free allocated storage >*/

void dip2(int niter   /* number of iterations */, 
	  int nw      /* filter size */, 
	  int nj      /* filter stretch for aliasing */, 
	  bool verb   /* verbosity */, 
	  float **u   /* input data */, 
	  float** p   /* output dip */, 
	  bool **mask /* input mask for known data */);
/*< estimate local dip >*/

/* This file is automatically generated. DO NOT EDIT! */

#define _dip3_h

void dip3_init(int m1, int m2, int m3       /* dimensions */, 
	       int* rect                    /* smoothing radius [3] */, 
	       int niter                    /* number of iterations */);
/*< initialize >*/

void dip3_close(void);
/*< free allocated storage >*/

void dip3(int dip                 /* 1 - inline, 2 - crossline */, 
	  int niter               /* number of nonlinear iterations */, 
	  int nw                  /* filter size */, 
	  int nj                  /* filter stretch for aliasing */, 
	  bool verb               /* verbosity */, 
	  float *u                /* input data */, 
	  float* p                /* output dip */, 
	  bool* mask              /* input mask for known data */,
	  float pmin, float pmax  /* minimum and maximum dip */);
/*< estimate local dip >*/

typedef struct Allpass2 *allpass2;
/* abstract data type */
                                                                                               
allpass2 allpass2_init(int nw         /* filter size (1,2,3) */,
                       int nj         /* filter step */,
                       int nx, int ny /* data size */,
                       float **pp     /* dip [ny][nx] */);
/*< Initialize >*/
                                                                                               
void allpass22_init (allpass2 ap1);
/*< Initialize linear operator >*/
                                                                                               
void allpass21_lop (bool adj, bool add, int n1, int n2, float* xx, float* yy);
/*< PWD as linear operator >*/
                                                                                               
void allpass21 (bool der          /* derivative flag */,
                const allpass2 ap /* PWD object */,
                float** xx        /* input */,
                float** yy        /* output */);
/*< plane-wave destruction >*/




#ifdef __cplusplus
}
#endif



#endif

